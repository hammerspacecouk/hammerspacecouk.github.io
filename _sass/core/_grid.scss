.grid {
    @include flexbox(block);
    @include flex-wrap();
    @include flex-direction(row);
    margin: 0 0 0 (-$size-grid-unit); // need brackets or Scss combines with the zero
    list-style-type: none;
    padding: 0;
}

.g {
    @include flexbox(inline-block);
    @include flex-wrap();
    @include flex-align(stretch);
    width: 100%; // will be overridden with fractions
    vertical-align: top;
    padding-left: $size-grid-unit;

    > * {
        @include flex(0 0 100%);
        // immediate child of grid_item MUST be 100% width, as that was the point of the grid
        width: 100%;
    }
}

.g-central {
    margin-left: auto;
    margin-right: auto;
}

.g--align-center {
    @include flex-align(center);
}

.g--align-end {
    @include flex-align(flex-end);
}

.g,
.g-unit {
    margin-bottom: $size-grid-unit;
    &:empty {
        margin-bottom: 0;
    }
}

.grid--flush {
    margin-left: 0;

    > .g {
        margin-bottom: 0;
        padding-left: 0;
    }
}

.grid--flat {
    margin: 0 0 (-$size-grid-unit) (-$size-grid-unit); // need brackets or Scss combines with the zero
}

// include fractions unprefixed
@include fractions();

// include fractions with all the breakpoint suffixes
@each $key, $value in $breakpoint-suffixes {
    @include mq($from: $key) {
        @include fractions($value);
    }
}